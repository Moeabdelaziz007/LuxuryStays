import { useState, useEffect, lazy, Suspense } from "react";
import { collection, getDocs, query, where, orderBy, limit, doc, getDoc, deleteDoc } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { useAuth } from "@/contexts/auth-context";
import Logo from "@/components/Logo";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Skeleton } from "@/components/ui/skeleton";
import { FaCalendarAlt, FaHeart, FaCreditCard, FaTachometerAlt } from "react-icons/fa";
import { safeDoc } from "@/lib/firebase";

// Lazy load components to reduce initial chunk size
const DashboardOverview = lazy(() => import("./components/DashboardOverview"));
const BookingsList = lazy(() => import("./components/BookingsList"));
const FavoritesList = lazy(() => import("./components/FavoritesList"));

// Types for stats
interface DashboardStats {
  totalBookings: number;
  activeBookings: number;
  totalFavorites: number;
  totalSpent: number;
}

export default function NewCustomerDashboard() {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState("overview");
  
  // States for data
  const [bookings, setBookings] = useState<any[]>([]);
  const [favorites, setFavorites] = useState<any[]>([]);
  const [stats, setStats] = useState<DashboardStats>({
    totalBookings: 0,
    activeBookings: 0,
    totalFavorites: 0,
    totalSpent: 0
  });
  
  // Loading and error states
  const [isLoadingBookings, setIsLoadingBookings] = useState(true);
  const [isLoadingFavorites, setIsLoadingFavorites] = useState(true);
  const [bookingsError, setBookingsError] = useState<Error | null>(null);
  const [favoritesError, setFavoritesError] = useState<Error | null>(null);
  
  // Fetch user bookings
  useEffect(() => {
    async function fetchUserBookings() {
      if (!user?.uid) return;
      
      setIsLoadingBookings(true);
      setBookingsError(null);
      
      try {
        const bookingsQuery = query(
          collection(db, "bookings"),
          where("userId", "==", user.uid),
          orderBy("createdAt", "desc")
        );
        
        const bookingsSnapshot = await safeDoc(() => getDocs(bookingsQuery));
        
        if (!bookingsSnapshot) {
          throw new Error("فشل في جلب بيانات الحجوزات");
        }
        
        const bookingsData = await Promise.all(
          bookingsSnapshot.docs.map(async (doc) => {
            const data = doc.data();
            
            // Get property info
            let propertyName = data.propertyName || "عقار غير معروف";
            let propertyImage = data.propertyImage || "";
            
            if (data.propertyId && !data.propertyName) {
              try {
                const propertyRef = await safeDoc(() => getDoc(doc(db, "properties", data.propertyId)));
                if (propertyRef) {
                  const propertyData = propertyRef.data();
                  if (propertyData) {
                    propertyName = propertyData.name;
                    propertyImage = propertyData.images?.[0] || "";
                  }
                }
              } catch (err) {
                console.error("Error fetching property details:", err);
              }
            }
            
            return {
              id: doc.id,
              propertyName,
              propertyImage,
              ...data
            };
          })
        );
        
        setBookings(bookingsData);
        
        // Update stats
        setStats(prev => ({
          ...prev,
          totalBookings: bookingsData.length,
          activeBookings: bookingsData.filter(booking => booking.status === 'confirmed').length,
          totalSpent: bookingsData.reduce((sum, booking) => sum + (booking.totalPrice || 0), 0)
        }));
      } catch (error) {
        console.error("Error fetching bookings:", error);
        setBookingsError(error instanceof Error ? error : new Error("حدث خطأ أثناء جلب الحجوزات"));
      } finally {
        setIsLoadingBookings(false);
      }
    }
    
    fetchUserBookings();
  }, [user?.uid]);
  
  // Fetch user favorites
  useEffect(() => {
    async function fetchUserFavorites() {
      if (!user?.uid) return;
      
      setIsLoadingFavorites(true);
      setFavoritesError(null);
      
      try {
        const favoritesQuery = query(
          collection(db, "favorites"),
          where("userId", "==", user.uid),
          limit(10)
        );
        
        const favoritesSnapshot = await safeDoc(() => getDocs(favoritesQuery));
        
        if (!favoritesSnapshot) {
          throw new Error("فشل في جلب بيانات المفضلة");
        }
        
        const favoritesData = await Promise.all(
          favoritesSnapshot.docs.map(async (doc) => {
            const data = doc.data();
            
            // Get property info
            let propertyName = data.propertyName || "عقار غير معروف";
            let propertyImage = data.propertyImage || "";
            let price = data.price || 0;
            let location = data.location || "موقع غير متوفر";
            let bedrooms = data.bedrooms || null;
            
            if (data.propertyId && (!data.propertyName || !data.propertyImage)) {
              try {
                const propertyRef = await safeDoc(() => getDoc(doc(db, "properties", data.propertyId)));
                if (propertyRef) {
                  const propertyData = propertyRef.data();
                  if (propertyData) {
                    propertyName = propertyData.name;
                    propertyImage = propertyData.images?.[0] || "";
                    price = propertyData.price || 0;
                    location = propertyData.location || "موقع غير متوفر";
                    bedrooms = propertyData.bedrooms;
                  }
                }
              } catch (err) {
                console.error("Error fetching property details for favorite:", err);
              }
            }
            
            return {
              id: doc.id,
              propertyName,
              propertyImage,
              price,
              location,
              bedrooms,
              ...data
            };
          })
        );
        
        setFavorites(favoritesData);
        
        // Update stats
        setStats(prev => ({
          ...prev,
          totalFavorites: favoritesData.length
        }));
      } catch (error) {
        console.error("Error fetching favorites:", error);
        setFavoritesError(error instanceof Error ? error : new Error("حدث خطأ أثناء جلب المفضلة"));
      } finally {
        setIsLoadingFavorites(false);
      }
    }
    
    fetchUserFavorites();
  }, [user?.uid]);
  
  // Handle removing a favorite
  const handleRemoveFavorite = async (favoriteId: string) => {
    if (!favoriteId) return;
    
    try {
      await safeDoc(() => deleteDoc(doc(db, "favorites", favoriteId)));
      
      // Update local state
      setFavorites(prev => prev.filter(fav => fav.id !== favoriteId));
      setStats(prev => ({
        ...prev,
        totalFavorites: prev.totalFavorites - 1
      }));
    } catch (error) {
      console.error("Error removing favorite:", error);
      // Show error toast
    }
  };
  
  // Loading skeleton
  const LoadingSkeleton = () => (
    <div className="space-y-6">
      <div className="h-10 bg-gray-800 rounded w-1/3"></div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {[1, 2, 3, 4].map(i => (
          <div key={i} className="h-32 bg-gray-800 rounded"></div>
        ))}
      </div>
      <div className="h-64 bg-gray-800 rounded"></div>
    </div>
  );
  
  return (
    <div className="flex flex-col min-h-screen bg-gray-900 text-white">
      {/* Logo positioned at top right */}
      <div className="absolute top-4 right-4 z-10">
        <Logo
          position="top-right"
          size="md"
          variant="neon"
          withText={true}
          withAnimation={true}
        />
      </div>

      <main className="flex-1 container mx-auto px-4 py-8 mt-16">
        <h1 className="text-3xl font-bold mb-6">لوحة تحكم العميل</h1>
        
        <Tabs
          defaultValue="overview"
          value={activeTab}
          onValueChange={setActiveTab}
          className="w-full"
        >
          <TabsList className="bg-gray-800 border-gray-700 mb-8">
            <TabsTrigger 
              value="overview"
              className="data-[state=active]:bg-[#39FF14] data-[state=active]:text-black"
            >
              <FaTachometerAlt className="mr-2" />
              نظرة عامة
            </TabsTrigger>
            <TabsTrigger 
              value="bookings"
              className="data-[state=active]:bg-[#39FF14] data-[state=active]:text-black"
            >
              <FaCalendarAlt className="mr-2" />
              حجوزاتي
            </TabsTrigger>
            <TabsTrigger 
              value="favorites"
              className="data-[state=active]:bg-[#39FF14] data-[state=active]:text-black"
            >
              <FaHeart className="mr-2" />
              المفضلة
            </TabsTrigger>
            <TabsTrigger 
              value="payments"
              className="data-[state=active]:bg-[#39FF14] data-[state=active]:text-black"
            >
              <FaCreditCard className="mr-2" />
              المدفوعات
            </TabsTrigger>
          </TabsList>
          
          <Suspense fallback={<LoadingSkeleton />}>
            <TabsContent value="overview" className="mt-0">
              <DashboardOverview
                stats={stats}
                userName={user?.name || ''}
                isLoading={isLoadingBookings || isLoadingFavorites}
              />
            </TabsContent>
            
            <TabsContent value="bookings" className="mt-0">
              <BookingsList
                bookings={bookings}
                isLoading={isLoadingBookings}
                error={bookingsError}
              />
            </TabsContent>
            
            <TabsContent value="favorites" className="mt-0">
              <FavoritesList
                favorites={favorites}
                isLoading={isLoadingFavorites}
                error={favoritesError}
                onRemoveFavorite={handleRemoveFavorite}
              />
            </TabsContent>
            
            <TabsContent value="payments" className="mt-0">
              <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-8 text-center">
                <div className="inline-flex h-14 w-14 items-center justify-center rounded-full bg-gray-900 mb-4">
                  <FaCreditCard className="h-6 w-6 text-[#39FF14]" />
                </div>
                <h3 className="text-lg font-medium text-white mb-2">قريباً</h3>
                <p className="text-gray-400 mb-4">
                  سيتم إضافة قسم المدفوعات في القريب العاجل. ترقبوا ذلك!
                </p>
              </div>
            </TabsContent>
          </Suspense>
        </Tabs>
      </main>
    </div>
  );
}