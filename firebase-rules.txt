rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ======= HELPER FUNCTIONS =======
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user has SUPER_ADMIN role
    function isSuperAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "SUPER_ADMIN";
    }
    
    // Check if user has PROPERTY_ADMIN role
    function isPropertyAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "PROPERTY_ADMIN";
    }
    
    // Check if user has CUSTOMER role
    function isCustomer() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "CUSTOMER";
    }
    
    // Validate user document
    function isValidUser(userData) {
      return userData.size() <= 10 && 
        userData.uid is string &&
        (userData.email == null || userData.email is string) &&
        userData.name is string &&
        ['SUPER_ADMIN', 'PROPERTY_ADMIN', 'CUSTOMER'].hasAny([userData.role]) &&
        userData.createdAt is string;
    }
    
    // Validate property document
    function isValidProperty(propertyData) {
      return propertyData.size() <= 20 && 
        propertyData.name is string &&
        propertyData.description is string &&
        propertyData.location is string &&
        propertyData.price is number &&
        propertyData.price > 0 &&
        propertyData.ownerId is string &&
        (propertyData.images == null || propertyData.images is list) &&
        propertyData.featured is bool;
    }
    
    // Validate booking document
    function isValidBooking(bookingData) {
      return bookingData.size() <= 15 && 
        bookingData.userId is string &&
        bookingData.propertyId is string &&
        bookingData.startDate is string &&
        bookingData.endDate is string &&
        bookingData.totalPrice is number &&
        bookingData.totalPrice > 0 &&
        ['pending', 'confirmed', 'cancelled'].hasAny([bookingData.status]);
    }
    
    // ======= COLLECTION RULES =======
    
    // Users collection
    match /users/{userId} {
      allow get: if isAuthenticated() && (isOwner(userId) || isSuperAdmin() || isPropertyAdmin());
      allow list: if isSuperAdmin() || isPropertyAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId && isValidUser(request.resource.data);
      allow update: if (isOwner(userId) || isSuperAdmin()) && isValidUser(request.resource.data);
      allow delete: if isSuperAdmin();
    }
    
    // Properties collection
    match /properties/{propertyId} {
      allow get, list: if true; // Anyone can view properties
      allow create: if (isSuperAdmin() || isPropertyAdmin()) && isValidProperty(request.resource.data);
      allow update: if (isSuperAdmin() || 
                      (isPropertyAdmin() && resource.data.ownerId == request.auth.uid)) && 
                      isValidProperty(request.resource.data);
      allow delete: if isSuperAdmin() || 
                     (isPropertyAdmin() && resource.data.ownerId == request.auth.uid);
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      allow get: if isAuthenticated() && 
                 (isSuperAdmin() || 
                  resource.data.userId == request.auth.uid || 
                  (isPropertyAdmin() && exists(/databases/$(database)/documents/properties/$(resource.data.propertyId)) && 
                   get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.ownerId == request.auth.uid));
                   
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid && 
                    isValidBooking(request.resource.data);
                    
      allow update: if isAuthenticated() && 
                   (isSuperAdmin() || 
                    request.auth.uid == resource.data.userId || 
                    (isPropertyAdmin() && exists(/databases/$(database)/documents/properties/$(resource.data.propertyId)) && 
                     get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.ownerId == request.auth.uid)) && 
                     isValidBooking(request.resource.data);
                     
      allow delete: if isAuthenticated() && 
                   (isSuperAdmin() || 
                    (isCustomer() && resource.data.userId == request.auth.uid && resource.data.status == "pending") || 
                    (isPropertyAdmin() && exists(/databases/$(database)/documents/properties/$(resource.data.propertyId)) && 
                     get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.ownerId == request.auth.uid));
    }
    
    // Services collection
    match /services/{serviceId} {
      allow get, list: if true; // Anyone can view services
      allow create, update, delete: if isSuperAdmin();
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow get, list: if true; // Anyone can view reviews
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                           (isSuperAdmin() || resource.data.userId == request.auth.uid);
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow get, list: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   (isSuperAdmin() || isPropertyAdmin() || request.resource.data.userId == request.auth.uid);
      allow update: if isAuthenticated() && 
                   (isSuperAdmin() || resource.data.userId == request.auth.uid);
      allow delete: if isAuthenticated() && 
                   (isSuperAdmin() || resource.data.userId == request.auth.uid);
    }
    
    // Payments collection with extra security
    match /payments/{paymentId} {
      allow get: if isAuthenticated() && 
                (isSuperAdmin() || resource.data.userId == request.auth.uid);
      allow list: if isAuthenticated() && 
                 (isSuperAdmin() || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }
    
    // Default deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}