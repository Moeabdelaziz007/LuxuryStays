// Firestore rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // Anyone can create a new user document with their user ID
      allow create: if request.auth.uid != null && request.auth.uid == userId;
      // Users can only read/update their own document
      allow read, update: if request.auth.uid == userId;
      // Allow super admins to read/write all user documents
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "SUPER_ADMIN";
    }

    // Properties collection
    match /properties/{propertyId} {
      // Anyone can read property documents
      allow read: if true;
      // Only property owners or super admins can create/update/delete
      allow create, update, delete: if 
        request.auth.uid != null && (
          request.resource.data.ownerId == request.auth.uid ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "PROPERTY_ADMIN" ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "SUPER_ADMIN"
        );
    }

    // Services collection
    match /services/{serviceId} {
      // Anyone can read service documents
      allow read: if true;
      // Only super admins can create/update/delete
      allow create, update, delete: if 
        request.auth.uid != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "SUPER_ADMIN";
    }

    // Bookings collection
    match /bookings/{bookingId} {
      // Users can read their own bookings or bookings for properties they own
      allow read: if 
        request.auth.uid != null && (
          resource.data.userId == request.auth.uid ||
          resource.data.propertyOwnerId == request.auth.uid ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "SUPER_ADMIN"
        );
      
      // Users can create bookings
      allow create: if request.auth.uid != null;
      
      // Users can only update/delete their own bookings
      allow update, delete: if 
        request.auth.uid != null && (
          resource.data.userId == request.auth.uid ||
          resource.data.propertyOwnerId == request.auth.uid ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "SUPER_ADMIN"
        );
    }
  }
}

// Storage rules
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      // Anyone can read storage files
      allow read: if true;
      
      // Only authenticated users can upload/delete files
      allow write: if request.auth != null;
    }
  }
}